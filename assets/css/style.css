
/*global effect*/
* {
    box-sizing: border-box;
  }

  
/* hero styling */
.hero {
  height: 300px;
  width: 300px;
  margin-bottom: 25px;
  background-image: url("../images/runBuddy.svg");
  background-size: cover;
  background-position: center;
  display: flex;
  flex: 0 0 100px; 
  border-style: solid;
  border-color:red;
  border-width: 1px;
  border-radius: 10px;
  padding: 10px; /*50px*/ 
 

}

  
  /*applies arial font to text in body of linked html doc*/
  body {
    font-family: Arial;
    margin: 0;
  }
  
  /*applies 40 pixels of space around objects, centers the text, and colors the background blue*/
  header {
    position: relative;
    width: 100%;
    height: 100px;
    padding: 5px;
    text-align: center;
    background: black;
    color:red;
  }

  .header {
    position: relative;
    width: 100%;
  }

  .header img {
    width: 50px;
    border-style: solid;
    border-color: red;
    border-width: 1px;
    border-radius: 10px;
    display: flex;
    flex: 0 0 400px;
    max-width: 100%;
    float: left;
  }

  .card img {
    display: flex;
    flex: 0 0 100px; 
    border-style: solid;
    border-color:red;
    border-width: 1px;
    border-radius: 10px;
    padding: 10px; /*50px*/ 
    max-width: 25%;
    height: auto;
    justify-content: left;
  }
  
  /* 
  What happens when we set the display property to flex? 
  TODO: Displays the targeted element as a block-level flex container
  */
  nav {
    display: flex;
    background-color: black;
  }
  
  nav a {
    color: gray;
    padding: 14px 20px;
    text-decoration: none;
    text-align: center;
  }
  
  /* 
  What is the flex-wrap property? 
  TODO: The flex-wrap property allows elements to show on the page without having to scroll horizontally 
  */
  main {
    display: flex;
    flex-wrap: wrap;
  }
  
  aside {
    flex: 1;
    background-color: black;
    padding: 80px;
    text-align: center;
  }
  
  
  .footer {
    position: relative;
    left: 0;
    bottom: 0;
    width: 100%;
    background-color: gray;
    color: black;
    text-align: center;
    height: 2.5rem;
  }
  
  /* 
  What does the justify-content property do? 
  TODO: Aligns the content of the element to the specified alingment  
  */
  .body {
    flex: 4;
    background-color: gray;
    padding: 20px;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
  }

  .content
  {
    flex: 4;
    background-color: gray;
    padding: 20px;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
  }
  
  /* 
  What is the flex property a shorthand property for?
  What is it doing here? 
  TODO:  The flex property is shorthand for setting flex items to either get bigger or smaller to fit the flex container on the screen.
  Here the property is giving the flexbox an area of 400px*/
 
 
  .card {
    border-style: solid;
    border-width: 1px;
    border-radius: 10px;
    padding: 10px;
    flex: 0 0 800px;
    background-color: gray;
    justify-content: center;
  }
  
  .card header {
    padding: 20px;
  }
  
  .card p {
    text-align: left;
  }
  
  .card img {
    width: 100%;
  }

  

  .contact-info img {
    width: 100px;
    border-style: solid;
    border-color: red;
    border-width: 1px;
    border-radius: 10px;
    padding: 10px; /*50px*/
    flex: 0 0 400px;
    max-width: 100%;
    height: auto;
    float: left;
  }

  .applications img {
    width: 50px;
    border-style: solid;
    border-color: red;
    border-width: 1px;
    border-radius: 10px;
    padding: 10px; /*50px*/
    flex: 0 0 400px;
    max-width: 100%;
    height: auto;
  }
  
/* application image styling */
.applications {
  height: 250px;
  width: 75%;
  margin-bottom: 25px;
  background-image: url("../images/NEED IMAGE.jpg");
  background-size: cover;
  background-position: center;
}
.apps-sub1{ 
  flex: 4;
  background-color: gray;
  padding: 20px;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}
    



  /* 
  What does the flex-direction property define?
  What is it doing here? 
  TODO: THe flex-direction property defines the direction that the boxes align. Here the flex box is organizinng the boxrs in a column.
  */
  @media screen and (max-width: 768px) {
    main,
    nav {
      flex-direction: column;
    }
  }
  